{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onChange","event","value","target","setState","onKeyUp","position","selectionStart","setCaretPosition","elem","caretPos","createTextRange","range","move","select","focus","setSelectionRange","onKeyEvent","key","preventDefault","document","getElementById","chars","state","split","nextPostion","length","currentPosition","splice","cusorPosition","join","keys","name","className","id","this","map","items","index","item","type","onClick","e","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3d8898f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      position: 0\n    };\n    this.keys = [\n      [{ name: 'Backspace', value: 'backspace', className: 'specialKey' }],\n      [{ name: '7', value: 7, className: 'keyItem' }, { name: '8', value: 8, className: 'keyItem' }, { name: '9', value: 9, className: 'keyItem' }],\n      [{ name: '4', value: 4, className: 'keyItem' }, { name: '5', value: 5, className: 'keyItem' }, { name: '6', value: 6, className: 'keyItem' }],\n      [{ name: '1', value: 1, className: 'keyItem' }, { name: '2', value: 2, className: 'keyItem' }, { name: '3', value: 3, className: 'keyItem' }],\n      [{ name: '0', value: 0, className: 'keyItem' }, { name: '.', value: '.', className: 'keyItem' }, { name: '-', value: '-', className: 'keyItem' }],\n      [{ name: '←', value: 'left', className: 'specialKey' }, { name: '→', value: 'right', className: 'specialKey' }],\n      [{ name: 'Clear All', value: 'clear', className: 'specialKey' }],\n    ];\n  }\n\n  onChange = (event) => {\n    const { value } = event.target;\n    this.setState({\n      value\n    });\n  }\n\n  onKeyUp = (event) => {\n    const position = event.target.selectionStart;\n    this.setState({\n      position\n    });\n  }\n\n  setCaretPosition = (elem, caretPos) => {\n    if (elem.createTextRange) {\n      const range = elem.createTextRange();\n      range.move('character', caretPos);\n      range.select();\n    } else if (elem.selectionStart || elem.selectionStart === 0) {\n      elem.focus();\n      elem.setSelectionRange(caretPos, caretPos);\n    } else elem.focus();\n  }\n\n  onKeyEvent = (event, key) => {\n    event.preventDefault();\n    let elem = document.getElementById('keyBoard');\n    let chars = this.state.value.split('');\n    let position = 0;\n\n    if (key === 'left') {\n      // left arrow event\n      position = (this.state.position - 1) > 0 ? this.state.position - 1 : 0;\n    } else if (key === 'right') {\n      // right arrow event\n      const nextPostion = this.state.position + 1;\n      position = nextPostion > this.state.value.length ? this.state.value.length : nextPostion;\n    } else if (key === 'backspace') {\n      // backspace\n      const currentPosition = elem.selectionStart;\n      if (currentPosition > 0) {\n        chars.splice(currentPosition - 1, 1);\n        position = currentPosition - 1;\n      }\n    } else if (key === 'clear') {\n      // clear all\n      chars = [];\n      position = 0;\n    } else {\n      const cusorPosition = elem.selectionStart || 0;\n      chars.splice(cusorPosition, 0, key);\n      position = cusorPosition + 1;\n      elem = document.getElementById('keyBoard');\n    }\n\n    const value = chars.join('');\n    this.setState({\n      value,\n      position\n    }, () => {\n      this.setCaretPosition(elem, position);\n    });\n  };\n\n\n  render() {\n    return (\n      <div className=\"keyboard-container\">\n        <h2>Simple Virtual keyboard With Arrows</h2>\n        <div className=\"inputContainer\">\n          <input id=\"keyBoard\" onChange={this.onChange} value={this.state.value} onKeyUp={this.onKeyUp} />\n        </div>\n        <div className=\"keyboard\">\n          {\n            this.keys.map((items, index) => (\n              <div className=\"keys\" key={`keyGroup-${index}`}>\n                {\n                  items.map(item => (\n                    <button key={item.value} type=\"button\" className={item.className} onClick={(e) => { this.onKeyEvent(e, item.value); }}>\n                      {item.name}\n                    </button>\n                  ))\n                }\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}